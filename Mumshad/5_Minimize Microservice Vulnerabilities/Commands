##### Lab : Security Contexts

- What is the user used to execute the sleep process within the ubuntu-sleeper pod?

    # kubectl exec ubuntu-sleeper -- whoami


- Edit the pod ubuntu-sleeper to run the sleep process with user ID 1010.

    # kubectl get pod ubuntu-sleeper -o yaml > sleeper.yaml
    # vim sleeper.yaml
    # cat sleeper.yaml | grep -i securitycontext -C 3
        spec:
        containers:
        - command:
            - sleep
            - "4800"
            image: ubuntu
            name: ubuntu-sleeper
            securityContext:
            capabilities:
                add: ["SYS_TIME"]

    # kubectl delete pod ubuntu-sleeper --force     << To delete the Pod faster.

    # kubectl apply -f sleeper.yaml 
        pod/ubuntu-sleeper created


- Now update the pod to also make use of the NET_ADMIN capability.

    # vim sleeper.yaml
        spec:
        containers:
        - command:
            - sleep
            - "4800"
            image: ubuntu
            name: ubuntu-sleeper
            securityContext:
            capabilities:
                add: ["SYS_TIME", "NET_ADMIN"]
    # kubectl delete pod ubuntu-sleeper.yaml

    # kubectl apply -f sleeper.yaml




##### Lab : Admission Controllers

- Which admission controller is enabled in this cluster which is normally disabled?.

    # cat /etc/kubernetes/manifests/kube-apiserver.yaml | grep -i enable
    - --enable-admission-plugins=NodeRestriction
    - --enable-bootstrap-token-auth=true


    # cat /etc/kubernetes/manifests/kube-apiserver.yaml | grep -i enable-admission-plugins
    - --enable-admission-plugins=NodeRestriction





-   # kubectl run nginx --image=nginx -n blue

    The previous step failed because kubernetes have NamespaceExists admission controller enabled which rejects requests to namespaces that do not exist. So, to create a namespace that does not exist automatically, we could enable the NamespaceAutoProvision admission controller
        Enable the NamespaceAutoProvision admission controller

        Note: Once you update kube-apiserver yaml file, please wait for a few minutes for the kube-apiserver to restart completely.


    # vim /etc/kubernetes/manifests/kube-apiserver.yaml

    # cat /etc/kubernetes/manifests/kube-apiserver.yaml | grep -i enable
    - --enable-admission-plugins=NodeRestriction,NamespaceAutomProvision        << Add NamespaceAutoProvision paramater

    # kubectl get pods          << check if the kube-api server Pod has come up




- Note that the NamespaceExists and NamespaceAutoProvision admission controllers are deprecated and now replaced by NamespaceLifecycle admission controller.

    - The NamespaceLifecycle admission controller will make sure that requests to a non-existent namespace is rejected and that the default namespaces such as default, kube-system and kube-public cannot be deleted.




- Now Disable DefaultStorageClass admission controller.

    - This admission controller observes creation of PersistentVolumeClaim objects that do not request any specific storage class and automatically adds a default storage class to them. This way, users that do not request any special storage class do not need to care about them at all and they will get the default one.

    - Note: Once you update kube-apiserver yaml file then please wait few mins for the kube-apiserver to restart completely.

    # vim /etc/kubernetes/manifests/kube-apiserver.yaml

    # cat /etc/kubernetes/manifests/kube-apiserver.yaml | grep -i disable
    - --disable-admission-plugins=DefaultStorageClass


- Since the kube-apiserver is running as pod you can check the process to see enabled and disabled plugins.

    # ps -ef | grep kube-apiserver | grep admission-plugins

    # ps -ef | grep -i kube-api | grep -i admission-plugins
        root       12953   12829  0 02:00 ?        00:00:05 kube-apiserver --advertise-address=192.9.0.6 --allow-privileged=true    --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt 
        --enable-admission-plugins=NodeRestriction,NamespaceAutoProvision 
        --disable-admission-plugins=DefaultStorageClass