##### Labs 2 :

- There is a user named himanshi on the controlplane host. Suspend this user account so that this user cannot login to the system but make sure not to delete it.

    # usermod -s /bin/nologin himanshi


- Create a user named sam on the controlplane host. The user's home directory must be /opt/sam. Login shell must be /bin/bash and uid must be 2328. Make sam a member of the admin group.

    # useradd -d /opt/sam -s /bin/bash -G admin -u 2328 sam




##### Labs 3 : identify-open-ports-remove-packages-services

</br>

- Which of the following commands is used to list all installed packages on an ubuntu system?

    # apt list --installed

Listing... Done
adduser/focal,now 3.118ubuntu2 all [installed]
apache2-bin/focal-updates,focal-security,now 2.4.41-4ubuntu3.15 amd64 [installed,automatic]
apache2-data/focal-updates,focal-security,now 2.4.41-4ubuntu3.15 all [installed,automatic]



- Check if python2.7 package is installed on the controlplane host.

    # apt list --installed | grep -i python2.7



- Which of the following commands can be used to list only active services on a system?

    The --all flag with systemctl list-units prints ALL services, both active and inactive.

    The --state inactive flag when added to this command will print only the inactive servies.


    # systemctl list-units --type service



- On the controlplane host, we have nginx service running which isn't needed on that system. 
    
    Stop the nginx service and remove its service unit file. Make sure not to remove nginx package from the system.

        - Find out the name of the unit file:

            # systemctl list-units --all | grep nginx


        - Stop Nginx service:

            # systemctl stop nginx

        - Find out the location of the service unit:

            # systemctl status nginx

        - Remove the unit file:

            # rm /lib/systemd/system/nginx.service



- We want to blacklist the evbug kernel module on controlplane host.
        Important Note: Do not reboot the node!

        # vim /etc/modprobe.d/blacklist.conf

        Change:

            #blacklist evbug
                to

            blacklist evbug




- Remove the nginx package from controlplane host.

    # apt remove nginx -y



- We have a service running on controlplane host which is listening on port 9090. 
    Identify the service and stop the same to free the 9090 port.

    # netstat -natp  | grep 9090

    # systemctl stop apache2



- We have the wget package version v1.18 installed on the host controlplane. There were issues reported with the current version of wget. 
    Please check for updates available for this package and update to the latest version available in the apt repos.

    # apt install wget -y




##### Labs 4 : SYSTEM HARDENING, LAB – UFW FIREWALL :

- Which of the following commands can be used to display the rules along with rule numbers next to each rule?

    # ufw status numbered



- What is the command to allow a tcp port range between 1000 and 2000 in ufw?

    # ufw allow 1000:2000/tcp



- How can you reset ufw rules to their default settings?

    # ufw reset



- On the node01 host, add a rule to allow incoming SSH connections.
    Do not enable the firewall yet.

    # ufw allow 22



- We have some services on node01 host, which are running on tcp port 9090 and 9091. 
    Add ufw rules to allow incoming connection on these ports from IP range 135.22.65.0/24 to any interface on node01.

    Once this is done, enable the firewall.

    # ufw allow  from 135.22.65.0/24 to any port 9090 proto tcp 
    # ufw allow  from 135.22.65.0/24 to any port 9091 proto tcp

    # ufw enable


- Lighttpd was identified to have several vulnerabilities in it. Disable the port 80 on node01 for ALL incoming requests.

    # netstat -ntulp | grep -i light
    tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      13739/lighttpd   

    # ufw deny 80



- We want to temporarily disable ufw firewall on node01 host but later we will enable it back.
    So make sure to disable the firewall but preserve all rules so that same can be effective when we enable it back.

    # ufw disable





##### Labs 5 : SYSTEM HARDENING, LAB – SECCOMP :

- Which of the following commands/tools can be used to trace syscalls ?

    # strace


- Which syscall is NOT made by the command ls /root?

    # strace -c ls /root

    - The ls command should not be using the connect syscall.


- For answering the next question, open a new terminal on the controlplane node by clicking on the + button next to Terminal 1. 
    Next, on this new terminal, run the Tracee tool as a container, with the appropriate flags to detect syscalls from new containers.

    On the controlplane node, run:

    # kubectl apply -f /root/tracee-deployment.yaml

    After the pod becomes ready , stream the logs using below command:

    # kubectl logs -f `kubectl get pods -l=io.kompose.service=tracee -o custom-columns=":metadata.name" --no-headers`





- We have just scheduled a new pod. What is the command run by the container inside this pod?

    # kubectl describe pod hello | grep -i args -C 3



- A seccomp profile file called custom-profile.json has been placed under /root directory.

    - This profile has the default action of SCMP_ACT_ERRNO that blocks all syscalls by default. 
    The syscalls to be allowed are part of the whitelist. This is an example of a whitelist type profile.



- What is the default Seccomp profile location in this cluster?

    - Seccomp profile location by default is set to 
        # /var/lib/kubelet/seccomp




- Create a new pod called audit-nginx using the nginx image and make use of the audit.json seccomp profile in the pod's security context.

    The audit.json file is already present in the default seccomp profile path in the controlplane node.


    # kubectl run audit-nginx --image=nginx --restart=Never --dry-run -o yaml > audit-nginx.yaml

    # vim audit-nginx.yaml

    # cat audit-nginx.yaml 
        apiVersion: v1
        kind: Pod
        metadata:
        creationTimestamp: null
        labels:
            run: audit-nginx
        name: audit-nginx
        spec:
        securityContext:
            seccompProfile:
            type: Localhost
            localhostProfile: profiles/audit.json
        containers:
        - image: nginx
            name: nginx
        dnsPolicy: ClusterFirst
        restartPolicy: Never
        status: {}

    # kubectl apply -f audit-nginx.yaml

    